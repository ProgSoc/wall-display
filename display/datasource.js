// Generated by CoffeeScript 1.7.1
(function() {
  var DataSource, IntervalDataSource, TimeDataSource, n, _i, _len, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DataSource = (function() {
    function DataSource(dataSource) {
      this.dataSource = dataSource;
      if (this.dataSource == null) {
        this.dataSource = function() {};
      }
      this.listeners = [];
    }

    DataSource.prototype.notifyListeners = function(newData) {
      var l, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        _results.push(l.onData(newData, this));
      }
      return _results;
    };

    DataSource.prototype.addListener = function(l) {
      return this.listeners.append(l);
    };

    DataSource.prototype.die = function() {
      return this.dataSource = null;
    };

    return DataSource;

  })();

  TimeDataSource = (function(_super) {
    __extends(TimeDataSource, _super);

    function TimeDataSource(interval) {
      this.interval = interval;
      this.__stop = false;
      this.__lastTimeoutId = -1;
      TimeDataSource.__super__.constructor.call(this, (function() {
        var lastTime;
        lastTime = Date.now();
        return (function(_this) {
          return function() {
            var curTime, dif;
            if (!_this.__stop) {
              curTime = Date.now();
              dif = curTime - lastTime;
              lastTime = curTime;
              _this.notifyListeners(dif);
              return _this.__lastTimeoutId = setTimeout((function() {
                return this.dataSource.call(this);
              }), _this.interval);
            }
          };
        })(this);
      })());
    }

    TimeDataSource.prototype.die = function() {
      clearInterval(this.__lastTimeoutId);
      return this.__stop = true;
    };

    return TimeDataSource;

  })(DataSource);

  IntervalDataSource = (function(_super) {
    __extends(IntervalDataSource, _super);

    function IntervalDataSource(onInterval, interval) {
      this.onInterval = onInterval;
      this.interval = interval;
      this.__stop = false;
      this.__lastTimeoutId = -1;
      IntervalDataSource.__super__.constructor.call(this, (function(_this) {
        return function() {
          if (!_this.__stop) {
            onInterval();
            return _this.__lastTimeoutId = setTimeout((function() {
              return this.onInterval.call(this);
            }), _this.interval);
          }
        };
      })(this));
    }

    return IntervalDataSource;

  })(DataSource);

  _ref = ["DataSource", "IntervalDataSource", "TimeDataSource"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    n = _ref[_i];
    window[n] = eval(n);
  }

}).call(this);
